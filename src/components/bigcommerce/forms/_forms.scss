// =============================================================================
// BC FORMS (CSS)
// =============================================================================


// Bigcommerce Component
// -----------------------------------------------------------------------------
//
// The Bigcommerce Coding Standards, coupled with Foundation Variables.
//
// 1. If set to false, there is no outputted CSS for this component.
// 2. This matches the variable of Foundation forms, as they come together
//
// -----------------------------------------------------------------------------

@if $exportCSS--forms { // 1, 2


    //
    // FORM LAYOUTS
    //
    // Purpose: Provide a couple of component styles to layout forms
    // -----------------------------------------------------------------------------

    // =============================================================================
    // FORM BODY
    // =============================================================================

    .form-body {
        background-color: $formBody-backgroundColor;
        border: $formBody-border;
        box-shadow: $formBody-boxShadow;
        margin-bottom: $formBody-marginBottom;
        max-width: $formBody-maxWidth;
        padding: $formBody-padding;
    }


    //
    // Checkboxes and Radios
    //
    // Purpose: We do these better than Foundation
    // -----------------------------------------------------------------------------

    .form-checkbox,
    .form-radio {

        @include u-hidden("visually");

        + .form-label {
            @include checkRadioBase();
        }

    }

    .form-checkbox:checked,
    .form-radio:checked {

        + .form-label {
            @include checkRadioBase--checked();
        }

    }

    //
    // Don't forget you focus styles if you're creating custom Inputs
    // -----------------------------------------------------------------------------
    .form-checkbox:focus,
    .form-radio:focus {

        + .form-label {
            @include checkRadioBase--focus();
        }

    }

    .form-checkbox[disabled],
    .form-radio[disabled] {

        + .form-label {
            @include checkRadioBase--disabled();
        }

    }

    // =============================================================================
    // CHECKBOX
    // =============================================================================

    .form-checkbox {

        + .form-label {
            @include checkBox-base();
        }

    }

    // =============================================================================
    // RADIO BUTTONS
    // =============================================================================

    .form-radio {

        + .form-label {
            @include radioButton-base();
        }

    }


    //
    // Inputs with internal actions
    //
    // Purpose: Define inputs that have internal action button, like a search box
    // -----------------------------------------------------------------------------

    .form-input.has-action {

        float: left;
        padding-right: $inputAction-input-paddingRight;

        + .button--inputAction {
            background: $input-bg-color;
            border: 0;
            border-radius: 0 $input-border-radius $input-border-radius 0;
            float: left;
            height: $inputAction-button-width;
            margin: remCalc($input-border-width) 0 0 $inputAction-button-marginLeft;
            width: $inputAction-button-width;
        }

    }


    //
    // PrefixPostfix
    //
    // Purpose: Pre/Postfixed label and actions to form elements
    // -----------------------------------------------------------------------------

    .form-prefixPostfix {
        @include prefixPostfix-container($prefixPostfix-inputClassName, $prefixPostfix-buttonClassName);
    }

    // PrefixPostfix inputs (but only if touching)
    .form-prefixPostfix-input {
        @include prefixPostfix-input();
    }

    // PrefixPostfix Labels
    .form-prefixPostfix-label {
        @include prefixPostfix-label();
    }

    .form-prefixPostfix-label--prefix {
        @include prefixPostfix-label--prefix($prefixPostfix-inputClassName);
    }

    .form-prefixPostfix-label--postfix {
        @include prefixPostfix-label--postfix();
    }

    // PrefixPostfix buttons
    .form-prefixPostfix-button--prefix {
        margin: 0 ($form-spacing / 2) 0 0;
    }

    .form-prefixPostfix-button--postfix {
        margin: 0 0 0 ($form-spacing / 2);
    }


    //
    // SWITCHES
    //
    // Purpose: CHECKBOX OVERRIDES THAT LOOK LIKE NICE SWITCHES
    // TODO: I think this will be greatly simplified if it was a JS component. Relying
    // on the :checked state makes selector too deep and flakey. Neat, but unrealistic.
    // -----------------------------------------------------------------------------


    //
    // Switch checkbox
    //
    // Purpose: The switch is just a custom, css checkbox.
    // -----------------------------------------------------------------------------

    .switch-checkbox {

        @include u-hidden("visually");

        // Focus state of the checkbox
        &:focus + .switch-toggle {
            border-color: $switch-focus-borderColor;
            box-shadow: $switch-focus-BoxShadow;
        }

    }

    //
    // Switch Toggle
    //
    // Purpose: The actual, graphical toggle you seen in the UI
    // -----------------------------------------------------------------------------

    .switch-toggle {

        background-color: $switch-backgroundColor;
        border: $switch-borderSize $switch-borderStyle $switch-borderColor;
        border-radius: $switch-borderRadius;
        cursor: $form-label-pointer;
        display: inline-block;
        height: $switch-height;
        position: relative;
        transition: $switch-transition;
        vertical-align: middle;
        width: $switch-width;

        .switch--important & {
            background-color: $switch-important-checked-backgroundColor;
            border-color: $switch-important-checked-borderColor;
        }

        .switch--checked & {
            background-color: $switch-checked-backgroundColor;
            border-color: $switch-checked-borderColor;
        }

    }

    //
    // Toggle element before pseudo element
    //
    // Purpose: Effectively used as the indicator of the switch, positioned left or right
    // -----------------------------------------------------------------------------

    .switch-toggle::before {
        background: $switch-indicator-color;
        border-radius: $switch-indicator-borderRadius;
        box-shadow: $switch-indicator-boxShadow;
        content: "";
        height: $switch-indicator-height;
        left: remCalc($switch-indicator-offSet);
        position: absolute;
        top: remCalc($switch-indicator-offSet);
        transition: $switch-transition;
        width: $switch-indicator-width;

        .switch--checked & {
            left: remCalc($switch-indicator-on-offSet);
        }
    }

    //
    // Toggle element supportive text
    //
    // Purpose: Effectively used as the background of the UI switch
    // Can have ON/OFF text or tick/cross icons in the content
    // -----------------------------------------------------------------------------

    .switch-label {

        color: $switch-label-text-color;
        height: $switch-label-height;
        line-height: $switch-lineHeight;
        position: absolute;
        right: $switch-label-text-rightPosition;
        text-transform: uppercase;
        transition: $switch-transition;

        .switch--checked & {
            font-weight: $switch-label-text-onFontWeight;
            left: $switch-label-text-rightPosition;
            right: auto;
        }

    }

    .switch-label--icon.icon { // fighting specificity

        @include square($switch-label-height);

        svg {
            @include square($switch-label-height);
            fill: $switch-label-text-color;
        }

    }

    //
    // Switch explanatory text labels
    //
    // Purpose: Text labels can be placed either side of the switch to give more
    // meaning to the position of the switch indicator.  "On this side, it means off",
    // "On that side it means on"
    // -----------------------------------------------------------------------------

    .switch-description--left {
        color: $switch-description-selected-color;
        margin-right: 5px;

        .switch--checked & {
            color: $switch-description-unselected-color;
        }
    }

    .switch-description--right {
        color: $switch-description-unselected-color;
        margin-left: 5px;

        .switch--checked & {
            color: $switch-description-selected-color;
        }
    }

    .switch-ariaDescription {
        @include u-hidden("visually");
    }


    //
    // FORM ACTIONS
    //
    // Purpose: Container for the form's primary actions, like Submit, Reset, etc.
    // This can also manifest as a fixed bar, which runs along the bottom of the page.
    // -----------------------------------------------------------------------------

    .form-actions {
        display: table-cell;
        padding: $form-actions-padding;
        vertical-align: middle;
    }

    .form-actions > * {
        display: inline-block;
        margin: 0 0 0 spacing("half");
        vertical-align: baseline;
    }

    .form-actions--fixed {
        background: $form-actions--fixed-background;
        border-top: $form-actions--fixed-border;
        bottom: 0;
        left: 0;
        padding: $form-actions--fixed-padding;
        position: fixed;
        right: 0;
        text-align: $form-actions--fixed-textAlign;
        z-index: $form-actions--fixed-zIndex;
    }


    // Form errors
    // -----------------------------------------------------------------------------
    //
    // Purpose: Used to display contextual errors in forms
    //
    // 1. Magic numbers, yet to think of a better way to align the icon in the input.
    //
    // -----------------------------------------------------------------------------

    .form-input-indicator {

        @include square($form-inputIndicator-size);
        float: left;
        margin-left: - remCalc(30px); // 1
        position: relative;
        top: remCalc(10px); // 1

        .form-prefixPostfix & {
            top: 0; //specific override due to flexbox middle alignment.
        }

        svg {
            fill: $form-success-color;
        }

    }

    .form-inlineMessage {
        display: inline-block;
        font-weight: $form-inlineMessage-fontWeight;
        margin: $form-inlineMessage-margin;
        width: 100%;
    }


    //
    // FORM FIELD VALIDATION MODIFIERS
    // -----------------------------------------------------------------------------

    .form-field--success,
    .form-field--error,
    .form-field--warning {

        .form-input {
            float: left;
        }

    }

    // =============================================================================
    // VALID STYLES
    // =============================================================================

    .form-field--success {

        .form-input,
        .form-select,
        .form-checkbox + .form-label::before,
        .form-radio + .form-label::before,
        .form-prefixPostfix-label {
            border-color: $form-success-color;
        }

        .form-inlineMessage {
            color: $form-success-color;
        }

        svg {
            fill: $form-success-color;
        }

    }

    // =============================================================================
    // INVALID STYLES
    // =============================================================================

    .form-field--error {

        .form-input,
        .form-select,
        .form-checkbox + .form-label::before,
        .form-radio + .form-label::before,
        .form-prefixPostfix-label {
            border-color: $form-error-color;
        }

        .form-inlineMessage {
            color: $form-error-color;
        }

        svg {
            fill: $form-error-color;
        }

    }

    // =============================================================================
    // WARNING STYLES
    // =============================================================================

    .form-field--warning {

        .form-input,
        .form-select,
        .form-checkbox + .form-label::before,
        .form-radio + .form-label::before,
        .form-prefixPostfix-label {
            border-color: $form-warning-color;
        }

        .form-inlineMessage {
            color: $form-warning-color;
        }

        svg {
            fill: $form-warning-color;
        }

    }

}
